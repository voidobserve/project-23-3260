C51 COMPILER V9.60.7.0   TMR2                                                              11/11/2024 10:49:25 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TMR2
OBJECT MODULE PLACED IN .\Release\Objects\tmr2.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\User\tmr2.c LARGE OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X000C) INCDI
                    -R(..\..\Libraries\Include;..\..\User;..\..\User\lib;..\..\Hardware) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Listi
                    -ngs\tmr2.lst) OBJECT(.\Release\Objects\tmr2.obj)

line level    source

   1          // 定时器TMR2的驱动源文件
   2          #include "tmr2.h"
   3          
   4          volatile unsigned char tmr2_flag = 0; // tmr2中断服务函数中会置位的标志位
   5          volatile u32 tmr2_cnt = 0; // 定时器TMR2的计数值（每次在中断服务函数中会加一）
   6          
   7          /**
   8           * @brief 配置定时器TMR2
   9           */
  10          void tmr2_config(void)
  11          {
  12   1          // 配置定时器，用来记录RF接收到的高电平持续时间
  13   1          __SetIRQnIP(TMR2_IRQn, TMR2_IQn_CFG); // 设置中断优先级（TMR2）
  14   1      
  15   1          TMR2_CONL &= ~TMR_PRESCALE_SEL(0x03); // 清除TMR2的预分频配置寄存器
  16   1          // 配置TMR2的预分频，为32分频，即21MHz / 32 = 0.67MHz，约0.67us计数一次
  17   1          // （实际测试和计算得出这个系统时钟是21MHz的，但是还是有些误差，不是准确的21MHz）
  18   1          TMR2_CONL |= TMR_PRESCALE_SEL(0x05);
  19   1          TMR2_CONL &= ~TMR_MODE_SEL(0x03); // 清除TMR2的模式配置寄存器
  20   1          TMR2_CONL |= TMR_MODE_SEL(0x01);  // 配置TMR2的模式为计数器模式，最后对系统时钟的脉冲进行计数
  21   1      
  22   1          TMR2_CONH &= ~TMR_PRD_PND(0x01); // 清除TMR2的计数标志位，表示未完成计数
  23   1          TMR2_CONH |= TMR_PRD_IRQ_EN(1);  // 使能TMR2的计数中断
  24   1      
  25   1          // 配置TMR2的计数周期
  26   1          TMR2_PRL = (unsigned char)(TMR2_CNT_TIME % 255);
  27   1          TMR2_PRH = (unsigned char)(TMR2_CNT_TIME / 255);
  28   1      
  29   1          // 清除TMR2的计数值
  30   1          TMR2_CNTL = 0;
  31   1          TMR2_CNTH = 0;
  32   1      
  33   1          TMR2_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除TMR2的时钟源配置寄存器
  34   1          // TMR2_CONL |= TMR_SOURCE_SEL(0x07); // 配置TMR2的时钟源，使用系统时钟
  35   1          TMR2_CONL |= TMR_SOURCE_SEL(0x05); // 配置TMR2的时钟源，不用任何时钟
  36   1                                             // __EnableIRQ(TMR2_IRQn);                          // 使能中断
  37   1      
  38   1          __DisableIRQ(TMR2_IRQn); // 禁用中断
  39   1      }
  40          
  41          /**
  42           * @brief 开启定时器TMR2，开始计时
  43           */
  44          void tmr2_enable(void)
  45          {
  46   1          // 重新给TMR2配置时钟
  47   1          TMR2_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除定时器的时钟源配置寄存器
  48   1          TMR2_CONL |= TMR_SOURCE_SEL(0x06);    // 配置定时器的时钟源，使用系统时钟（约21MHz）
  49   1      
  50   1          __EnableIRQ(TMR2_IRQn); // 使能中断
  51   1      }
  52          
  53          /**
C51 COMPILER V9.60.7.0   TMR2                                                              11/11/2024 10:49:25 PAGE 2   

  54           * @brief 关闭定时器2，清空计数值
  55           */
  56          void tmr2_disable(void)
  57          {
  58   1          // 不给定时器提供时钟，让它停止计数
  59   1          TMR2_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除定时器的时钟源配置寄存器
  60   1          TMR2_CONL |= TMR_SOURCE_SEL(0x05);    // 配置定时器的时钟源，不用任何时钟
  61   1      
  62   1          // 清除定时器的计数值
  63   1          TMR2_CNTL = 0;
  64   1          TMR2_CNTH = 0;
  65   1      
  66   1          __DisableIRQ(TMR2_IRQn); // 关闭中断（不使能中断）
  67   1      }
  68          
  69          // TMR2中断服务函数
  70          void TIMR2_IRQHandler(void) interrupt TMR2_IRQn
  71          {
  72   1          // 进入中断设置IP，不可删除
  73   1          __IRQnIPnPush(TMR2_IRQn);
  74   1      
  75   1          // ---------------- 用户函数处理 -------------------
  76   1      
  77   1          // 周期中断
  78   1          if (TMR2_CONH & TMR_PRD_PND(0x1))
  79   1          {
  80   2              TMR2_CONH |= TMR_PRD_PND(0x1); // 清除pending
  81   2      
  82   2              tmr2_cnt++; // 每5ms加一次
  83   2      
  84   2              // P12 = ~P12; // 测试用，看看中断触发周期是否正确
  85   2      
  86   2              // 如果到了5s
  87   2              if (tmr2_cnt == 1000)
  88   2              {
  89   3                  tmr2_cnt = 0;
  90   3                  tmr2_flag = 1; // 给对应的标志位置一
  91   3              }
  92   2          }
  93   1      
  94   1          // 退出中断设置IP，不可删除
  95   1          __IRQnIPnPop(TMR2_IRQn);
  96   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    244    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
