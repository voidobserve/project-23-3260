C51 COMPILER V9.60.7.0   RF_SCAN                                                           11/08/2024 17:56:17 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE RF_SCAN
OBJECT MODULE PLACED IN .\Release\Objects\rf_scan.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\User\rf_scan.c LARGE OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X000C) IN
                    -CDIR(..\..\Libraries\Include;..\..\User;..\..\User\lib) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Listings\rf_scan.
                    -lst) OBJECT(.\Release\Objects\rf_scan.obj)

line level    source

   1          // 扫描RF信号的源文件
   2          #include "rf_scan.h"
   3          
   4          #include "tmr3.h"     // 用来判断按键是短按、长按还是持续的定时器
   5          #include "rf_learn.h" // 使用到了学习得到的、保存在flash中的地址
   6          #include "rf_recv.h"  // RF信号接收
   7          #include "send_key.h" // 发送带有键值的信号
   8          
   9          #include "key_conversion.h" // 将键值转换成功能值（功能值唯一）
  10          
  11          // 对RF信号接收引脚进行一次扫描，如果有信号，则进行相应的处理
  12          void rf_scan(void)
  13          {
  14   1          static u8 press_flag = 0;                // 按键状态标志位，0--未按下，1--短按，2--长按，3--持续
  15   1          static volatile u32 timer_total_cnt = 0; // 总计时值，用来判定短按、长按和持续
  16   1      
  17   1          // static u16 send_data = 0; // 存放待发送的数据（测试用/旧版程序使用）
  18   1      
  19   1          static u8 key = 0; // 存放接收到的键值
  20   1      
  21   1      #if 0  // 测试能否接收和发送一个数据帧
                      if (recv_rf_flag)
                      {
                          recv_rf_flag = 0;        // 清除标志位
                          keyval = rf_data & 0x0F; // 记录键值
              
                          send_data = rf_data & 0x0F;
                          send_data |= KEY_PRESS_CONTINUE << 5;
                          send_keyval(send_data);
                          return;
                      }
              #endif // end 测试能否接收和发送一个数据帧
  33   1      
  34   1          if (recv_rf_flag && 0 == timer_total_cnt && 0 == press_flag)
  35   1          {
  36   2              // 如果未按下，记录本次按下的时间
  37   2              recv_rf_flag = 0; // 清除标志位
  38   2      
  39   2              if (1 == rf_addr_isMatch())
  40   2              {
  41   3                  press_flag = 1; // 假设是短按
  42   3      
  43   3      #ifdef DEVELOPMENT_BOARD // 开发板上最后只需要发送遥控器对应的键值
                          // 记录一次键值
                          key = rf_data & 0x3F;
              #endif // end ifdef DEVELOPMENT_BOARD
  47   3      
  48   3      #ifdef CIRCUIT_BOARD // 目标电路板上需要将遥控器的键值转换成自定义的功能值
  49   3                  // 记录一次键值（实际上是自定义的功能值）
  50   3                  key = key_to_funval(rf_data >> 8, rf_data & 0x3F);
  51   3      #endif // end ifdef CIRCUIT_BOARD
  52   3      
  53   3                  tmr3_enable(); // 打开定时器，开始计数
C51 COMPILER V9.60.7.0   RF_SCAN                                                           11/08/2024 17:56:17 PAGE 2   

  54   3              }
  55   2          }
  56   1          else if (timer_total_cnt < 75)
  57   1          {
  58   2              // 如果是短按的判定时间内（这里假设按下并松开了按键的时间是0~750ms之内）
  59   2              if (recv_rf_flag && tmr3_cnt <= 12)
  60   2              {
  61   3                  // 如果收到了信号，并且两次信号的时间不超过120ms
  62   3                  // （哪怕是短按，也会收到若干个信号，这些信号的间隔在13ms左右，
  63   3                  // 一个信号持续时间是40ms左右，这里放宽了判断条件）
  64   3                  recv_rf_flag = 0;
  65   3      
  66   3                  if (1 == rf_addr_isMatch())
  67   3                  {
  68   4      #ifdef DEVELOPMENT_BOARD // 开发板上最后只需要发送遥控器对应的键值
                              // 记录一次键值
                              key = rf_data & 0x3F;
              #endif // end ifdef DEVELOPMENT_BOARD
  72   4      
  73   4      #ifdef CIRCUIT_BOARD // 目标电路板上需要将遥控器的键值转换成自定义的功能值
  74   4                      // 记录一次键值（实际上是自定义的功能值）
  75   4                      key = key_to_funval(rf_data >> 8, rf_data & 0x3F);
  76   4      #endif // end ifdef CIRCUIT_BOARD
  77   4      
  78   4                      timer_total_cnt += tmr3_cnt; // 累计计数时间
  79   4                      tmr3_cnt = 0;                // 清空计数值
  80   4                  }
  81   3              }
  82   2              else if (tmr3_cnt > 12 && press_flag)
  83   2              {
  84   3                  // 如果在120ms范围外，没有收到信号，说明此时已经松开手了，是短按
  85   3                  static u8 old_key = 0; // 存放上一次接收的遥控器按键键值，用于辅助判断双击
  86   3      
  87   3                  press_flag = 0;
  88   3                  timer_total_cnt = 0;
  89   3      
  90   3                  tmr3_disable();
  91   3                  tmr3_cnt = 0;
  92   3      
  93   3                  tmr4_cnt = 0;
  94   3                  tmr4_enable();
  95   3                  old_key = key; // 记录键值，以便下一次判断是否为双击（要两次键值相同）
  96   3      
  97   3                  while (1)
  98   3                  {
  99   4                      if (recv_rf_flag && tmr4_cnt > 50 && tmr4_cnt < 110)
 100   4                      {
 101   5                          // 如果两次按键的时间间隔在50ms~110ms之内，可能有双击
 102   5                          if (old_key == key)
 103   5                          {
 104   6                              // 如果两次按下的键值相等，说明是双击
 105   6                              send_status_keyval(KEY_PRESS_DOUBLECLICK, key);
 106   6                              delay_ms(220);    // 忽略第二次按下时连续发送过来的信号
 107   6                              recv_rf_flag = 0; // 清除标志位
 108   6                              key = 0;
 109   6                              old_key = 0;
 110   6                              return;
 111   6                          }
 112   5                          else
 113   5                          {
 114   6                              // 如果两次按下的键值不相等，说明不是双击
 115   6                              // 这里不清除标志位，可以留到下一次扫描
C51 COMPILER V9.60.7.0   RF_SCAN                                                           11/08/2024 17:56:17 PAGE 3   

 116   6                              send_status_keyval(KEY_PRESS_SHORT, old_key);
 117   6                              key = 0;
 118   6                              old_key = 0;
 119   6                              return;
 120   6                          }
 121   5                      }
 122   4                      else if (recv_rf_flag && tmr4_cnt > 110)
 123   4                      {
 124   5                          // 如果两次按下按键的时间间隔超出了110ms，说明不是双击
 125   5                          // 这里不清除标志位，可以留到下一次扫描
 126   5                          send_status_keyval(KEY_PRESS_SHORT, old_key); // 发送带有短按信息的键值
 127   5                          key = 0;
 128   5                          old_key = 0;
 129   5                          return;
 130   5                      }
 131   4                      else if (0 == recv_rf_flag && tmr4_cnt > 110)
 132   4                      {
 133   5                          // 如果超过110ms都没有按下下一个按键，说明是短按
 134   5                          tmr4_disable(); // 关闭定时器
 135   5                          tmr4_cnt = 0;
 136   5                          send_status_keyval(KEY_PRESS_SHORT, old_key); // 发送带有短按信息的键值
 137   5                          key = 0;
 138   5                          old_key = 0;
 139   5                          return;
 140   5                      }
 141   4                  }
 142   3              }
 143   2          }
 144   1          else
 145   1          {
 146   2              // 长按和持续的处理
 147   2              if (1 == press_flag && timer_total_cnt >= 75 && timer_total_cnt < 90)
 148   2              {
 149   3                  // 如果进入到这里，说明按下按键至少有750ms了
 150   3                  // 发送一次带有长按标志的信号
 151   3                  press_flag = 2;
 152   3      
 153   3      #ifdef DEVELOPMENT_BOARD // 开发板上最后只需要发送遥控器对应的键值
              
                          key = rf_data & 0x3F;
              
              #endif // end ifdef DEVELOPMENT_BOARD
 158   3      
 159   3      #ifdef CIRCUIT_BOARD // 目标电路板上需要将遥控器的键值转换成自定义的功能值
 160   3      
 161   3                  // 记录一次键值（实际上是自定义的功能值）
 162   3                  key = key_to_funval(rf_data >> 8, rf_data & 0x3F);
 163   3      
 164   3      #endif // end ifdef CIRCUIT_BOARD
 165   3      
 166   3                  send_status_keyval(KEY_PRESS_LONG, key); // 发送带有长按信息的键值
 167   3      
 168   3                  press_flag = 3;
 169   3              }
 170   2      
 171   2              if (3 == press_flag && recv_rf_flag && tmr3_cnt <= 12)
 172   2              {
 173   3                  // 如果收到了信号，并且两次信号的时间不超过120ms
 174   3                  // （哪怕是短按，也会收到若干个信号，这些信号的间隔在13ms左右，
 175   3                  // 一个信号持续时间是40ms左右，这里放宽了判断条件）
 176   3                  recv_rf_flag = 0;
 177   3      
C51 COMPILER V9.60.7.0   RF_SCAN                                                           11/08/2024 17:56:17 PAGE 4   

 178   3                  if (1 == rf_addr_isMatch())
 179   3                  {
 180   4      #ifdef DEVELOPMENT_BOARD              // 开发板上最后只需要发送遥控器对应的键值
                              key = rf_data & 0x3F; // 记录键值
              #endif                                // end ifdef DEVELOPMENT_BOARD
 183   4      
 184   4      #ifdef CIRCUIT_BOARD // 目标电路板上需要将遥控器的键值转换成自定义的功能值
 185   4                      // 记录一次键值（实际上是自定义的功能值）
 186   4                      key = key_to_funval(rf_data >> 8, rf_data & 0x3F);
 187   4      #endif // end ifdef CIRCUIT_BOARD
 188   4      
 189   4                      timer_total_cnt += tmr3_cnt; // 累计计数时间
 190   4                      tmr3_cnt = 0;                // 清空计数值
 191   4      
 192   4                      // 这里的时间间隔是以每个信号的周期为准，因为判断recv_rf_flag的时候，
 193   4                      // 就是要有信号接收完成这个标志位才会置一，代码才能进入这里
 194   4                      if (timer_total_cnt >= 90)
 195   4                      {
 196   5                          // 清空累计计数时间，发送一次带有持续标志和按键键值的信号
 197   5                          // 接下来每到一定的时间就发送一次带有持续标志和按键键值的信号
 198   5                          send_status_keyval(KEY_PRESS_CONTINUE, key); // 发送带有持续按下消息的16位键值
 199   5                          timer_total_cnt = 75;
 200   5                      }
 201   4                  }
 202   3              }
 203   2              else if (tmr3_cnt > 12 && press_flag)
 204   2              {
 205   3                  // 如果在120ms范围外，没有收到信号，说明此时已经松开手了
 206   3                  // 这里可以发送一次长按后松开的信号
 207   3                  send_status_keyval(KEY_PRESS_LOOSE, key); // 发送长按后松开按键的信号
 208   3      
 209   3                  // 清除标志位和计数值
 210   3                  press_flag = 0;
 211   3                  timer_total_cnt = 0;
 212   3      
 213   3                  tmr3_disable();
 214   3                  tmr3_cnt = 0;
 215   3      
 216   3                  key = 0;
 217   3                  return;
 218   3              }
 219   2          }
 220   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1048    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      7    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
