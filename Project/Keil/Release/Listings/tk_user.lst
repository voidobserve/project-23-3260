C51 COMPILER V9.60.7.0   TK_USER                                                           12/02/2024 16:50:47 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TK_USER
OBJECT MODULE PLACED IN .\Release\Objects\tk_user.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\User\tk_user.c LARGE OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X000C) IN
                    -CDIR(..\..\Libraries\Include;..\..\Hardware;..\..\User;..\..\User\lib) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Li
                    -stings\tk_user.lst) OBJECT(.\Release\Objects\tk_user.obj)

line level    source

   1          /**
   2           ******************************************************************************
   3           * @file    User/tk_user.c
   4           * @author  HUGE-IC Application Team
   5           * @version V1.0.0
   6           * @date    05-20-2022
   7           * @brief   Main program body
   8           ******************************************************************************
   9           * @attention
  10           *
  11           * <h2><center>&copy; COPYRIGHT 2022 TAIXIN-IC</center></h2>
  12           *
  13           *
  14           *
  15           ******************************************************************************
  16           */
  17          
  18          /* Includes ------------------------------------------------------------------*/
  19          #include <stdio.h>
  20          #include "include.h"
  21          #include "my_config.h"
  22          
  23          
  24          /**
  25           * @brief __is_double_click() 判断是否有双击同一个触摸按键,内部最长延时时间：DETECT_DOUBLE_CLICK_INTERVAL
  26           *
  27           * @param touch_key_id_const
  28           * @return u8 0--没有双击同一个触摸按键，1--双击了同一个触摸按键
  29           */
  30          u8 __is_double_click(const u32 touch_key_id_const)
  31          {
  32   1          u8 i = 0;                   // 循环计数值
  33   1          volatile u32 touch_key = 0; // 存放每次检测到的按键
  34   1      
  35   1          for (; i < DETECT_DOUBLE_CLICK_INTERVAL; i++)
  36   1          {
  37   2              delay_ms(1);
  38   2              __tk_scan();
  39   2              touch_key = __tk_key_flag;
  40   2      
  41   2              if (touch_key_id_const == touch_key)
  42   2              {
  43   3                  // 如果检测到是同一个按键按下，说明是双击
  44   3                  return 1; // 双击了同一个触摸按键，返回1
  45   3              }
  46   2          }
  47   1      
  48   1          return 0; // 没有双击同一个触摸按键，返回0
  49   1      }
  50          
  51          enum
  52          {
  53              TOUCH_KEY_SCAN_STATUS_NONE,                  // 空状态，检测是否有按键按下
C51 COMPILER V9.60.7.0   TK_USER                                                           12/02/2024 16:50:47 PAGE 2   

  54              TOUCH_KEY_SCAN_STATUS_IS_DETECT_LOOG_PRESS,  // 正在检测是否为长按（要跟检测长按作区分）
  55              TOUCH_KEY_SCAN_STATUS_IS_HANDLE_LONG_PRESS,  // 正在处理长按
  56              TOUCH_KEY_SCAN_STATUS_IS_HANDLE_HOLD_PRESS,  // 正在处理长按持续（不松手）
  57              TOUCH_KEY_SCAN_STATUS_IS_HANDLE_SHORT_PRESS, // 正在处理短按
  58          
  59              TOUCH_KEY_SCAN_STATUS_IS_WAIT_SHORT_PRESS_RELEASE, // 正在等待短按松开
  60              TOUCH_KEY_SCAN_STATUS_IS_WAIT_LONG_PRESS_RELEASE,  // 正在等待长按松开
  61              TOUCH_KEY_SCAN_STATUS_IS_END,                      // 收尾处理
  62          };
  63          
  64          static volatile u8 touch_key_scan_status = 0; // 非阻塞的按键扫描函数中，使用的状态机
  65          
  66          // 非阻塞的按键扫描函数
  67          void touch_key_scan(void)
  68          {
  69   1          volatile u32 touch_key = 0;             // __tk_key_flag 单次按键标志
  70   1          static u32 touch_key_last = 0;          // 用于存放长按时，对应的按键
  71   1          static volatile u32 touch_time_cnt = 0; // 长按计数值
  72   1      
  73   1          /* 按键扫描函数 */
  74   1          __tk_scan();               // 使用了库里面的接口（闭源库）
  75   1          touch_key = __tk_key_flag; // __tk_key_flag 单次按键标志
  76   1      
  77   1          if (TOUCH_KEY_SCAN_STATUS_NONE == touch_key_scan_status) // 未检测到按键时
  78   1          {
  79   2              // 如果有按键按下（并且之前扫描到的不是长按）
  80   2      
  81   2              // 判断是否为长按：
  82   2      
  83   2              if (touch_key_last == 0) // 如果之前未检测到按键
  84   2              {
  85   3                  touch_key_last = touch_key;
  86   3              }
  87   2              else if (touch_key_last == touch_key)
  88   2              {
  89   3                  // 如果上次检测到的按键与此次的按键相等，说明按键还未松开
  90   3                  touch_time_cnt += (1 + ONE_CYCLE_TIME_MS);
  91   3      
  92   3                  if (touch_time_cnt >= LONG_PRESS_TIME_THRESHOLD_MS)
  93   3                  {
  94   4                      // 如果长按超过了设置的长按时间
  95   4                      // 跳转到长按处理
  96   4                      touch_time_cnt = 0; // 清除长按时间计数
  97   4                      // printf("long press\n");
  98   4                      touch_key_scan_status = TOUCH_KEY_SCAN_STATUS_IS_HANDLE_LONG_PRESS;
  99   4                  }
 100   3              }
 101   2              else
 102   2              {
 103   3                  // 如果上次检测到的按键与此次的按键不相等，并且上次检测到的按键不等于0
 104   3                  // touch_time_cnt = 0; // 清除长按时间计数（可以留到收尾处理）
 105   3      
 106   3                  // 跳转到短按处理
 107   3                  touch_key_scan_status = TOUCH_KEY_SCAN_STATUS_IS_HANDLE_SHORT_PRESS;
 108   3      
 109   3                  // printf("short press\n");
 110   3              }
 111   2      
 112   2              delay_ms(1); //
 113   2          }
 114   1      
 115   1          if (TOUCH_KEY_SCAN_STATUS_IS_HANDLE_SHORT_PRESS == touch_key_scan_status)
C51 COMPILER V9.60.7.0   TK_USER                                                           12/02/2024 16:50:47 PAGE 3   

 116   1          {
 117   2              // 如果是正在处理短按
 118   2              bit flag_is_double_click = 0; // 标志位，是否有按键双击
 119   2      
 120   2              if (TOUCH_KEY_ID_1 == touch_key_last)
 121   2              {
 122   3                  // 如果KEY1被触摸
 123   3                  flag_is_double_click = __is_double_click(touch_key_last);
 124   3                  if (flag_is_double_click)
 125   3                  {
 126   4                      // 如果有按键双击
 127   4      #if USE_MY_DEBUG
                              printf("k1 double press\n");
              #endif
 130   4                      send_status_keyval(KEY_PRESS_DOUBLECLICK, TOUCH_KEY1); // 发送带有状态的键值
 131   4                  }
 132   3                  else
 133   3                  {
 134   4                      // 如果没有按键双击，说明是短按
 135   4      #if USE_MY_DEBUG
                              printf("k1 press\n");
              #endif
 138   4                      send_status_keyval(KEY_PRESS_SHORT, TOUCH_KEY1); // 发送带有状态的键值
 139   4                  }
 140   3      
 141   3                  touch_key_scan_status = TOUCH_KEY_SCAN_STATUS_IS_WAIT_SHORT_PRESS_RELEASE; // 等待按键松开
 142   3              }
 143   2              else if (TOUCH_KEY_ID_2 == touch_key_last)
 144   2              {
 145   3                  // 如果KEY2被触摸
 146   3                  flag_is_double_click = __is_double_click(touch_key_last);
 147   3                  if (flag_is_double_click)
 148   3                  {
 149   4                      // 如果有按键双击
 150   4      #if USE_MY_DEBUG
                              printf("k2 double press\n");
              #endif
 153   4                      send_status_keyval(KEY_PRESS_DOUBLECLICK, TOUCH_KEY2); // 发送带有状态的键值
 154   4                  }
 155   3                  else
 156   3                  {
 157   4                      // 如果没有按键双击，说明是短按
 158   4      #if USE_MY_DEBUG
                              printf("k2 press\n");
              #endif
 161   4                      send_status_keyval(KEY_PRESS_SHORT, TOUCH_KEY2); // 发送带有状态的键值
 162   4                  }
 163   3      
 164   3                  touch_key_scan_status = TOUCH_KEY_SCAN_STATUS_IS_WAIT_SHORT_PRESS_RELEASE; // 等待按键松开
 165   3              }
 166   2              else if (TOUCH_KEY_ID_3 == touch_key_last)
 167   2              {
 168   3                  // 如果KEY3被触摸
 169   3                  flag_is_double_click = __is_double_click(touch_key_last);
 170   3                  if (flag_is_double_click)
 171   3                  {
 172   4                      // 如果有按键双击
 173   4      #if USE_MY_DEBUG
                              printf("k3 double press\n");
              #endif
 176   4                      send_status_keyval(KEY_PRESS_DOUBLECLICK, TOUCH_KEY3); // 发送带有状态的键值
 177   4                  }
C51 COMPILER V9.60.7.0   TK_USER                                                           12/02/2024 16:50:47 PAGE 4   

 178   3                  else
 179   3                  {
 180   4                      // 如果没有按键双击，说明是短按
 181   4      #if USE_MY_DEBUG
                              printf("k3 press\n");
              #endif
 184   4                      send_status_keyval(KEY_PRESS_SHORT, TOUCH_KEY3); // 发送带有状态的键值
 185   4                  }
 186   3      
 187   3                  touch_key_scan_status = TOUCH_KEY_SCAN_STATUS_IS_WAIT_SHORT_PRESS_RELEASE; // 等待按键松开
 188   3              }
 189   2              else if (TOUCH_KEY_ID_4 == touch_key_last)
 190   2              {
 191   3                  // 如果KEY4被触摸
 192   3                  flag_is_double_click = __is_double_click(touch_key_last);
 193   3                  if (flag_is_double_click)
 194   3                  {
 195   4                      // 如果有按键双击
 196   4      #if USE_MY_DEBUG
                              printf("k4 double press\n");
              #endif
 199   4                      send_status_keyval(KEY_PRESS_DOUBLECLICK, TOUCH_KEY4); // 发送带有状态的键值
 200   4                  }
 201   3                  else
 202   3                  {
 203   4                      // 如果没有按键双击，说明是短按
 204   4      #if USE_MY_DEBUG
                              printf("k4 press\n");
              #endif
 207   4                      send_status_keyval(KEY_PRESS_SHORT, TOUCH_KEY4); // 发送带有状态的键值
 208   4                  }
 209   3      
 210   3                  touch_key_scan_status = TOUCH_KEY_SCAN_STATUS_IS_WAIT_SHORT_PRESS_RELEASE; // 等待按键松开
 211   3              }
 212   2              else if (TOUCH_KEY_ID_5 == touch_key_last)
 213   2              {
 214   3                  // 如果KEY5被触摸
 215   3                  flag_is_double_click = __is_double_click(touch_key_last);
 216   3                  if (flag_is_double_click)
 217   3                  {
 218   4                      // 如果有按键双击
 219   4      #if USE_MY_DEBUG
                              printf("k5 double press\n");
              #endif
 222   4                      send_status_keyval(KEY_PRESS_DOUBLECLICK, TOUCH_KEY5); // 发送带有状态的键值
 223   4                  }
 224   3                  else
 225   3                  {
 226   4                      // 如果没有按键双击，说明是短按
 227   4      #if USE_MY_DEBUG
                              printf("k5 press\n");
              #endif
 230   4                      send_status_keyval(KEY_PRESS_SHORT, TOUCH_KEY5); // 发送带有状态的键值
 231   4                  }
 232   3      
 233   3                  touch_key_scan_status = TOUCH_KEY_SCAN_STATUS_IS_WAIT_SHORT_PRESS_RELEASE; // 等待按键松开
 234   3              }
 235   2          }
 236   1      
 237   1          if (TOUCH_KEY_SCAN_STATUS_IS_HANDLE_LONG_PRESS == touch_key_scan_status)
 238   1          {
 239   2              // 处理长按
C51 COMPILER V9.60.7.0   TK_USER                                                           12/02/2024 16:50:47 PAGE 5   

 240   2              if (TOUCH_KEY_ID_1 == touch_key)
 241   2              {
 242   3                  // 如果KEY1被触摸
 243   3      
 244   3      #if USE_MY_DEBUG
                          printf("k1 long press\n");
              #endif
 247   3                  send_status_keyval(KEY_PRESS_LONG, TOUCH_KEY1);
 248   3              }
 249   2              else if (TOUCH_KEY_ID_2 == touch_key)
 250   2              {
 251   3                  // 如果KEY2被触摸
 252   3      
 253   3      #if USE_MY_DEBUG
                          printf("k2 long press\n");
              #endif
 256   3                  send_status_keyval(KEY_PRESS_LONG, TOUCH_KEY2);
 257   3              }
 258   2              else if (TOUCH_KEY_ID_3 == touch_key)
 259   2              {
 260   3                  // 如果KEY3被触摸
 261   3      
 262   3      #if USE_MY_DEBUG
                          printf("k3 long press\n");
              #endif
 265   3                  send_status_keyval(KEY_PRESS_LONG, TOUCH_KEY3);
 266   3              }
 267   2              else if (TOUCH_KEY_ID_4 == touch_key)
 268   2              {
 269   3                  // 如果KEY4被触摸
 270   3      
 271   3      #if USE_MY_DEBUG
                          printf("k4 long press\n");
              #endif
 274   3                  send_status_keyval(KEY_PRESS_LONG, TOUCH_KEY4);
 275   3              }
 276   2              else if (TOUCH_KEY_ID_5 == touch_key)
 277   2              {
 278   3                  // 如果KEY5被触摸
 279   3      
 280   3      #if USE_MY_DEBUG
                          printf("k5 long press\n");
              #endif
 283   3                  send_status_keyval(KEY_PRESS_LONG, TOUCH_KEY5);
 284   3              }
 285   2      
 286   2              touch_key_scan_status = TOUCH_KEY_SCAN_STATUS_IS_HANDLE_HOLD_PRESS; // 跳转到长按持续
 287   2          }
 288   1      
 289   1          if (TOUCH_KEY_SCAN_STATUS_IS_HANDLE_HOLD_PRESS == touch_key_scan_status)
 290   1          {
 291   2              // 处理长按持续
 292   2      
 293   2              if (touch_key_last == touch_key)
 294   2              {
 295   3                  touch_time_cnt++;
 296   3                  if (TOUCH_KEY_ID_1 == touch_key)
 297   3                  {
 298   4                      if (touch_time_cnt >= HOLD_PRESS_TIME_THRESHOLD_MS)
 299   4                      {
 300   5                          touch_time_cnt = 0;
 301   5      #if USE_MY_DEBUG
C51 COMPILER V9.60.7.0   TK_USER                                                           12/02/2024 16:50:47 PAGE 6   

                                  printf("k1 continue press\n");
              #endif
 304   5                          send_status_keyval(KEY_PRESS_CONTINUE, TOUCH_KEY1);
 305   5                      }
 306   4                  }
 307   3                  else if (TOUCH_KEY_ID_2 == touch_key)
 308   3                  {
 309   4                      if (touch_time_cnt >= HOLD_PRESS_TIME_THRESHOLD_MS)
 310   4                      {
 311   5                          touch_time_cnt = 0;
 312   5      #if USE_MY_DEBUG
                                  printf("k2 continue press\n");
              #endif
 315   5                          send_status_keyval(KEY_PRESS_CONTINUE, TOUCH_KEY2);
 316   5                      }
 317   4                  }
 318   3                  else if (TOUCH_KEY_ID_3 == touch_key)
 319   3                  {
 320   4                      if (touch_time_cnt >= HOLD_PRESS_TIME_THRESHOLD_MS)
 321   4                      {
 322   5                          touch_time_cnt = 0;
 323   5      #if USE_MY_DEBUG
                                  printf("k3 continue press\n");
              #endif
 326   5                          send_status_keyval(KEY_PRESS_CONTINUE, TOUCH_KEY3);
 327   5                      }
 328   4                  }
 329   3                  else if (TOUCH_KEY_ID_4 == touch_key)
 330   3                  {
 331   4                      if (touch_time_cnt >= HOLD_PRESS_TIME_THRESHOLD_MS)
 332   4                      {
 333   5                          touch_time_cnt = 0;
 334   5      #if USE_MY_DEBUG
                                  printf("k4 continue press\n");
              #endif
 337   5                          send_status_keyval(KEY_PRESS_CONTINUE, TOUCH_KEY4);
 338   5                      }
 339   4                  }
 340   3                  else if (TOUCH_KEY_ID_5 == touch_key)
 341   3                  {
 342   4                      if (touch_time_cnt >= HOLD_PRESS_TIME_THRESHOLD_MS)
 343   4                      {
 344   5                          touch_time_cnt = 0;
 345   5      #if USE_MY_DEBUG
                                  printf("k5 continue press\n");
              #endif
 348   5                          send_status_keyval(KEY_PRESS_CONTINUE, TOUCH_KEY5);
 349   5                      }
 350   4                  }
 351   3      
 352   3                  delay_ms(1);
 353   3              }
 354   2              else
 355   2              {
 356   3                  // 如果之前检测到的按键与当前检测到的按键不一致，
 357   3                  // 说明 可能松开了手 或是 一只手按住了原来的按键另一只手按了其他按键
 358   3      
 359   3                  // 跳转到等待长按松开
 360   3                  touch_key_scan_status = TOUCH_KEY_SCAN_STATUS_IS_WAIT_LONG_PRESS_RELEASE;
 361   3              }
 362   2          }
 363   1      
C51 COMPILER V9.60.7.0   TK_USER                                                           12/02/2024 16:50:47 PAGE 7   

 364   1          if ((TOUCH_KEY_SCAN_STATUS_IS_WAIT_LONG_PRESS_RELEASE == touch_key_scan_status) ||
 365   1              (TOUCH_KEY_SCAN_STATUS_IS_WAIT_SHORT_PRESS_RELEASE == touch_key_scan_status))
 366   1          {
 367   2              // 如果是等待按键松开
 368   2              static volatile u16 loose_cnt = 0; // 存放松手计数值
 369   2      
 370   2              if (touch_key == 0)
 371   2              {
 372   3                  loose_cnt++;
 373   3                  delay_ms(1);
 374   3              }
 375   2              else
 376   2              {
 377   3                  // 只要有一次检测到按键，说明没有松开手
 378   3                  loose_cnt = 0;
 379   3              }
 380   2      
 381   2              if (loose_cnt >= LOOSE_PRESS_CNT_MS) // 这里的比较值需要注意，不能大于变量类型对应的最大值
 382   2              {
 383   3                  loose_cnt = 0; // 清空松手计数
 384   3                  // 如果 xx ms内没有检测到按键按下，说明已经松开手
 385   3      
 386   3                  if (TOUCH_KEY_SCAN_STATUS_IS_WAIT_LONG_PRESS_RELEASE == touch_key_scan_status)
 387   3                  {
 388   4                      if (TOUCH_KEY_ID_1 == touch_key_last)
 389   4                      {
 390   5      #if USE_MY_DEBUG
                                  printf("k1 long press loose\n");
              #endif
 393   5                          send_status_keyval(KEY_PRESS_LOOSE, TOUCH_KEY1);
 394   5                      }
 395   4                      else if (TOUCH_KEY_ID_2 == touch_key_last)
 396   4                      {
 397   5      #if USE_MY_DEBUG
                                  printf("k2 long press loose\n");
              #endif
 400   5                          send_status_keyval(KEY_PRESS_LOOSE, TOUCH_KEY2);
 401   5                      }
 402   4                      else if (TOUCH_KEY_ID_3 == touch_key_last)
 403   4                      {
 404   5      #if USE_MY_DEBUG
                                  printf("k3 long press loose\n");
              #endif
 407   5                          send_status_keyval(KEY_PRESS_LOOSE, TOUCH_KEY3);
 408   5                      }
 409   4                      else if (TOUCH_KEY_ID_4 == touch_key_last)
 410   4                      {
 411   5      #if USE_MY_DEBUG
                                  printf("k4 long press loose\n");
              #endif
 414   5                          send_status_keyval(KEY_PRESS_LOOSE, TOUCH_KEY4);
 415   5                      }
 416   4                      else if (TOUCH_KEY_ID_5 == touch_key_last)
 417   4                      {
 418   5      #if USE_MY_DEBUG
                                  printf("k5 long press loose\n");
              #endif
 421   5                          send_status_keyval(KEY_PRESS_LOOSE, TOUCH_KEY5);
 422   5                      }
 423   4                  }
 424   3      
 425   3                  touch_key_scan_status = TOUCH_KEY_SCAN_STATUS_IS_END; // 跳转到收尾处理
C51 COMPILER V9.60.7.0   TK_USER                                                           12/02/2024 16:50:47 PAGE 8   

 426   3              }
 427   2          }
 428   1      
 429   1          if (TOUCH_KEY_SCAN_STATUS_IS_END == touch_key_scan_status)
 430   1          {
 431   2              // 收尾处理
 432   2              touch_key = 0;
 433   2              touch_key_last = 0;
 434   2              touch_time_cnt = 0;
 435   2      
 436   2              touch_key_scan_status = TOUCH_KEY_SCAN_STATUS_NONE;
 437   2          }
 438   1      }
 439          
 440          /*************************** (C) COPYRIGHT 2022 TAIXIN-IC ***** END OF FILE *****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1505    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     11      13
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
