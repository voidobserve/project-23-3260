C51 COMPILER V9.60.7.0   TMR0                                                              11/12/2024 17:21:53 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TMR0
OBJECT MODULE PLACED IN .\Release\Objects\tmr0.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Hardware\tmr0.c LARGE OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X000C) I
                    -NCDIR(..\..\Libraries\Include;..\..\Hardware;..\..\User;..\..\User\lib) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\L
                    -istings\tmr0.lst) OBJECT(.\Release\Objects\tmr0.obj)

line level    source

   1          #include "tmr0.h"
   2          
   3          // #define TMR0_CNT_TIME 152 // 152 * 0.65625us 约等于100us
   4          // 定时器定时周期 (单位:Hz)
   5          // 周期值 = 系统时钟 / 定时器分频 / 频率 - 1
   6          #define TMR0_PERIOD (SYSCLK / 128 / 1000 - 1) // 1000Hz,1ms
   7          
   8          // volatile bit tmr0_flag = 0; // tmr0中断服务函数中会置位的标志位
   9          volatile u32 tmr0_cnt = 0; // 定时器TMR0的计数值（每次在中断服务函数中会加一）
  10          
  11          /**
  12           * @brief 配置定时器TMR0
  13           */
  14          void tmr0_config(void)
  15          {
  16   1          __SetIRQnIP(TMR0_IRQn, TMR0_IQn_CFG); // 设置中断优先级（TMR0）
  17   1          __DisableIRQ(TMR0_IRQn);              // 禁用定时器中断
  18   1          IE_EA = 1;                            // 打开总中断
  19   1      
  20   1          // 清除TMR0的计数值
  21   1          TMR0_CNTL = 0;
  22   1          TMR0_CNTH = 0;
  23   1      
  24   1          TMR0_CONL &= ~TMR_PRESCALE_SEL(0x03); // 清除TMR0的预分频配置寄存器
  25   1          TMR0_CONL |= TMR_PRESCALE_SEL(0x07); // 配置预分频寄存器,128分频
  26   1          TMR0_CONL &= ~TMR_MODE_SEL(0x03); // 清除TMR0的模式配置寄存器
  27   1          TMR0_CONL |= TMR_MODE_SEL(0x01);  // 配置TMR0的模式为计数器模式，最后对系统时钟的脉冲进行计数
  28   1      
  29   1          TMR0_CONH &= ~TMR_PRD_PND(0x01); // 清除TMR0的计数标志位，表示未完成计数
  30   1          TMR0_CONH |= TMR_PRD_IRQ_EN(1);  // 使能TMR0的计数中断
  31   1      
  32   1          TMR0_PRH = TMR_PERIOD_VAL_H((TMR0_PERIOD >> 8) & 0xFF); // 周期值
  33   1          TMR0_PRL = TMR_PERIOD_VAL_L((TMR0_PERIOD >> 0) & 0xFF);
  34   1      
  35   1          TMR0_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除TMR0的时钟源配置寄存器
  36   1          TMR0_CONL |= TMR_SOURCE_SEL(0x05); // 配置TMR0的时钟源，不用任何时钟
  37   1      }
  38          
  39          /**
  40           * @brief 开启定时器TMR0，开始计时
  41           */
  42          void tmr0_enable(void)
  43          {
  44   1          // 重新给TMR0配置时钟
  45   1          TMR0_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除定时器的时钟源配置寄存器
  46   1          TMR0_CONL |= TMR_SOURCE_SEL(0x06);    // 配置定时器的时钟源，使用系统时钟（约21MHz）
  47   1      
  48   1          __EnableIRQ(TMR0_IRQn); // 使能中断
  49   1          IE_EA = 1;              // 打开总中断
  50   1      }
  51          
  52          /**
  53           * @brief 关闭定时器0，清空计数值
C51 COMPILER V9.60.7.0   TMR0                                                              11/12/2024 17:21:53 PAGE 2   

  54           */
  55          void tmr0_disable(void)
  56          {
  57   1          // 不给定时器提供时钟，让它停止计数
  58   1          TMR0_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除定时器的时钟源配置寄存器
  59   1          TMR0_CONL |= TMR_SOURCE_SEL(0x05);    // 配置定时器的时钟源，不用任何时钟
  60   1      
  61   1          // 清除定时器的计数值
  62   1          TMR0_CNTL = 0;
  63   1          TMR0_CNTH = 0;
  64   1      
  65   1          __DisableIRQ(TMR0_IRQn); // 关闭中断（不使能中断）
  66   1      }
  67          
  68          // TMR0中断服务函数
  69          void TIMR0_IRQHandler(void) interrupt TMR0_IRQn
  70          {
  71   1          // 进入中断设置IP，不可删除
  72   1          __IRQnIPnPush(TMR0_IRQn);
  73   1      
  74   1          // ---------------- 用户函数处理 -------------------
  75   1      
  76   1          // 周期中断
  77   1          if (TMR0_CONH & TMR_PRD_PND(0x1))
  78   1          {
  79   2              TMR0_CONH |= TMR_PRD_PND(0x1); // 清除pending
  80   2      
  81   2              tmr0_cnt++;
  82   2      
  83   2              // P11 = ~P11; // 测试用，看看中断触发周期是否正确
  84   2      
  85   2      #if 0
                      // 如果到了5s
                      if (TMR0_cnt == 1000)
                      {
                          TMR0_cnt = 0;
                          TMR0_flag = 1; // 给对应的标志位置一
                      }
              #endif
  93   2          }
  94   1      
  95   1          // 退出中断设置IP，不可删除
  96   1          __IRQnIPnPop(TMR0_IRQn);
  97   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    185    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
